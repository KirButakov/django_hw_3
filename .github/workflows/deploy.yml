name: Django CI/CD

on:
  push:
    branches:
      - homework  # Убедись, что это правильная ветка

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: my_project
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment variables
        run: |
          echo "Checking environment variables..."
          echo "DB_HOST=${{ secrets.DB_HOST }}"
          echo "DB_NAME=${{ secrets.DB_NAME }}"
          echo "DB_USER=${{ secrets.DB_USER }}"
          echo "DB_PORT=${{ secrets.DB_PORT }}"

      - name: Run tests with SQLite
        working-directory: my_project
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_1994 }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "==== Checking server directories ===="
            ls -la /home/${{ secrets.SERVER_USER }}

            echo "==== Setting up project directory ===="
            if [ ! -d "/home/${{ secrets.SERVER_USER }}/my_project" ]; then
              echo "Project directory not found. Creating it..."
              mkdir -p /home/${{ secrets.SERVER_USER }}/my_project
              chmod 755 /home/${{ secrets.SERVER_USER }}/my_project
              git clone -b homework git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO.git /home/${{ secrets.SERVER_USER }}/my_project
            fi

            cd /home/${{ secrets.SERVER_USER }}/my_project || exit 1

            echo "==== Checking Git status ===="
            git status

            echo "==== Pulling latest changes ===="
            git pull origin homework

            echo "==== Checking for docker-compose.yml ===="
            ls -la /home/${{ secrets.SERVER_USER }}/my_project/docker-compose.yml

            echo "==== Stopping existing containers ===="
            docker-compose down

            echo "==== Pulling updated Docker images ===="
            docker-compose pull

            echo "==== Checking database variables ===="
            echo "DB_HOST=${{ secrets.DB_HOST }}"
            echo "DB_PORT=${{ secrets.DB_PORT }}"
            echo "DB_USER=${{ secrets.DB_USER }}"

            echo "==== Waiting for PostgreSQL to be ready ===="
            for i in {1..30}; do
              if pg_isready -h "${{ secrets.DB_HOST }}" -p "${{ secrets.DB_PORT }}" -U "${{ secrets.DB_USER }}"; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "PostgreSQL is not ready, retrying..."
              sleep 2
            done

            echo "==== Starting Docker containers ===="
            docker-compose up --build -d

            echo "==== Running database migrations ===="
            docker exec -i my_project_web python manage.py migrate

            echo "==== Collecting static files ===="
            docker exec -i my_project_web python manage.py collectstatic --noinput

            echo "==== Cleaning up unused Docker images ===="
            docker system prune -af






